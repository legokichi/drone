doctype 5
html(lang="ja")
  head
    meta(charset="utf-8")
    meta(http-equiv="X-UA-Compatible", content="IE=edge,chrome=1")
    title= title
    link(rel='stylesheet', href='/stylesheets/normalize.css')
    :less
      *:not(input) {
        margin: 0;
        padding: 0;
        border: 0;
      }
      #local{
        position: absolute;
        left:   0%;
        width: 30%;
        border:1px solid red;
      }
      #localOverlay{
        position: absolute;
        left:  0%;
        width: 30%;
        border:1px solid red;
      }
      #remote{
        position: absolute;
        left:  30%;
        width: 70%;
        border:1px solid red;
      }
      #setting{
        position:absolute;
        left:  0%;
        width: 30%;
        top: 50%;
        border:1px solid red;
      }
      input[type="button"]{
        padding: 10px 20px;
      }
    script(src='http://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js')
    script(src='https://dl.dropboxusercontent.com/u/265158/socket.io.js')
    script(src='https://dl.dropboxusercontent.com/u/265158/webrtc.io.js')
    script(src='https://dl.dropboxusercontent.com/u/265158/camera.js')
  body
    canvas#local
    canvas#localOverlay
    video#remote(autoplay="autoplay")

    div#setting
      table#ui
        tr
          td ピクセル変化検出閾値(0~90):
          td
            input#pixelChangeThreshold(type='range', name='range', min='0', max='90')
          td
            span#pixelChangeThresholdView 0
        tr
          td 変化ピクセル割合検出閾値下限(0~0.05):
          td
            input#minimumChangeRateThreshold(type='range', name='range', min='0', max='0.5', step='0.001', value='0.02')
          td
            span#minimumChangeRateThresholdView 0
        tr
          td 変化ピクセル割合検出閾値上限(0~1):
          td
            input#maximumChangeRateThreshold(type='range', name='range', min='0', max='1', step='0.001', value='0.03')
          td
            span#maximumChangeRateThresholdView 0
      div
        検出枠移動
        input#goTop(type='button', value='↑')
        input#goRight(type='button', value='→')
        input#goBottom(type='button', value='↓')
        input#goLeft(type='button', value='←')
      div
        input#blinkLeftEye(type='button', value='left eye brink')
        input#blinkRightEye(type='button', value='right eye bkink')

    :coffeescript
      X = 0
      Y = 0
      pixel_Change_Threshold = 0
      minimum_Change_Rate_Threshold = 0
      maximum_Change_Rate_Threshold = 0

      main = ->
        pixel_Change_Threshold = $("#pixelChangeThreshold").val()
        minimum_Change_Rate_Threshold = $("#minimumChangeRateThreshold").val()
        maximum_Change_Rate_Threshold = $("#maximumChangeRateThreshold").val()

        $("#pixelChangeThreshold").change ->
          pixel_Change_Threshold = $(this).val()
          $("#pixelChangeThresholdView").html(pixel_Change_Threshold)
        $("#minimumChangeRateThreshold").change ->
          minimum_Change_Rate_Threshold = $(this).val()
          $("#minimumChangeRateThresholdView").html(minimum_Change_Rate_Threshold)
        $("#maximumChangeRateThreshold").change ->
          maximum_Change_Rate_Threshold = $(this).val()
          $("#maximumChangeRateThresholdView").html(maximum_Change_Rate_Threshold)
        
        $("#pixelChangeThresholdView").html(pixel_Change_Threshold)
        $("#minimumChangeRateThresholdView").html(minimum_Change_Rate_Threshold)
        $("#maximumChangeRateThresholdView").html(maximum_Change_Rate_Threshold)
        
        $("#goTop").click -> Y-=2
        $("#goBottom").click -> Y+=2
        $("#goLeft").click -> X-=2
        $("#goRight").click -> X+=2
        
        $("#blinkLeftEye").click -> socket.emit("broadcast", "left")
        $("#blinkRightEye").click -> socket.emit("broadcast", "right")
        
        rtc.connect("ws://duxca.com:8001")

        rtc.on "add remote stream", (stream)->
          rtc.attachStream(stream, "remote")
        rtc.createStream {"video": true, "audio": false}, (stream)->
        socket = io.connect('http://duxca.com:3000')

        $remote = $("#local")
        $overlay = $("#localOverlay")
        socket.on "OnTouchMove", (data)->
          $overlay.attr {
            width: $remote.width()
            height:$remote.height()
          }
          ctx = $overlay[0].getContext("2d")
          for touch in data.touches
            x = touch.x*$remote.width()
            y = touch.y*$remote.height()
            ctx.beginPath()
            ctx.fillStyle = 'rgb(155, 187, 89)'
            ctx.arc(x, y, 10, 0, Math.PI*2, false)
            ctx.fill()
            console.log x,y


        new Camera({
            width: 240,
            height: 160,
            useAudio: false,
            interval: 125,
            canvas: document.getElementById("local")
          })
          .setup(->
            @posL =
              x: @width/2+@width/32
              y: @height/4
              w: @width /8-@width/32
              h: @height/8
            @posR =
              x: @width/4+@width/8
              y: @height/4
              w: @width /8-@width/32
              h: @height/8
            @oldsL = (0 for i in [0...@posL.w*@posL.h])
            @oldsR = (0 for i in [0...@posR.w*@posR.h])

          )
          .draw(->
            @posL.x = @width /2+@width/32 + X
            @posL.y = @height/4 + Y
            @posR.x = @width/4+@width/8 + X
            @posR.y = @height/4 + Y
            
            [flagL, oldsL] = checkDeference(@posL, @context, @oldsL.slice())
            [flagR, oldsR] = checkDeference(@posR, @context, @oldsR.slice())
            if flagL
              socket.emit("broadcast", {ID:"OnEyeBlink",eye:"left"})
            else
              @oldsL = oldsL
            if flagR
              socket.emit("broadcast", {ID:"OnEyeBlink",eye:"right"})
            else
              @oldsR = oldsR
          )

      checkDeference = ({x, y, w, h}, ctx, olds)->
        imgdata = ctx.getImageData(x, y, w, h)
        data = imgdata.data
        defArea = 0
        for i in [0...data.length] by 4
          sum = data[i] + data[i+1] + data[i+2]
          if Math.abs(sum - olds[i/4]) > pixel_Change_Threshold # change pixel 45
            defArea++
            data[i] = data[i+1] = data[i+2] = 255
          olds[i/4] = sum
        defRatio = defArea / data.length
        flag = minimum_Change_Rate_Threshold < defRatio < maximum_Change_Rate_Threshold
        ctx.putImageData(imgdata, x, y)
        ctx.strokeStyle = if flag then "red" else "white"
        ctx.strokeRect(x, y, w, h)
        [flag, olds]


      main()